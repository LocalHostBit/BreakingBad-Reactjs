{"version":3,"sources":["assets/img/breakingbad.png","components/characters/CharacterItem.js","components/characters/CharacterGrid.js","components/Navigation.js","components/Search.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CharacterItem","item","className","src","img","alt","name","portrayed","birthday","nickname","status","CharacterGrid","items","isLoading","map","key","char_id","Navigation","breakingbad","Search","getQuery","useState","text","setText","type","placeholder","value","onChange","e","q","target","autoFocus","Footer","App","setItems","setIsLoading","query","setQuery","useEffect","a","axios","result","console","log","data","fetchItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,yC,6LC+B5BC,EA7BO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKF,EAAKG,IAAKC,IAAI,iBAE5B,yBAAKH,UAAU,aACf,4BAAKD,EAAKK,MACV,4BACI,4BACI,qDADJ,IACwCL,EAAKM,WAE7C,4BACI,kDADJ,IACkCN,EAAKO,UAEvC,4BACI,uDADJ,IAC0CP,EAAKQ,UAE/C,4BACI,0DADJ,IAC0CR,EAAKS,aCVpDC,EARO,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MACxB,OAD+C,EAAhBC,UACX,2CAAyB,6BAASX,UAAU,SAC3DU,EAAME,KAAI,SAAAb,GAAI,OACX,kBAAC,EAAD,CAAec,IAAKd,EAAKe,QAASf,KAAMA,S,iBCIjCgB,EARI,WACf,OACI,4BAAQf,UAAU,UACd,yBAAKC,IAAKe,IAAab,IAAI,OCmBxBc,EAvBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,mBAAS,IADJ,mBACtBC,EADsB,KAChBC,EADgB,KAO7B,OACI,6BAASrB,UAAU,UACf,8BACI,2BACAsB,KAAK,OACLtB,UAAU,eACVuB,YAAY,0BACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAZAC,EAYgBD,EAAEE,OAAOJ,MAXvCH,EAAQM,QACRT,EAASS,GAFI,IAACA,GAaVE,WAAS,OCNVC,EAVA,WACX,OACI,oCACI,yBAAK9B,UAAU,UACX,wHC+BD+B,EA7BH,WAAO,IAAD,EACUZ,mBAAS,IADnB,mBACTT,EADS,KACFsB,EADE,OAEkBb,oBAAS,GAF3B,mBAETR,EAFS,KAEEsB,EAFF,OAGUd,oBAAS,GAHnB,mBAGTe,EAHS,KAGFC,EAHE,KAmBhB,OAdAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACIC,IAAK,6DAC8BJ,IAFvC,OACXK,EADW,OAKjBC,QAAQC,IAAIF,EAAOG,MACnBV,EAASO,EAAOG,MAChBT,GAAa,GAPI,2CAAH,qDAUhBU,KACC,CAACT,IAGF,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQhB,SAAU,SAACS,GAAD,OAAOQ,EAASR,MAClC,kBAAC,EAAD,CAAehB,UAAWA,EAAWD,MAAOA,IAC5C,kBAAC,EAAD,QCpBgBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.4a57fc5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/breakingbad.7891d075.png\";","import React from 'react'\n\nconst CharacterItem = ({ item }) => {\n    return (\n        <div className='card'>\n            <div className='card-inner'>\n                <div className='card-front'>\n                    <img src={item.img} alt='{item.name}'/>\n                </div>\n                <div className='card-back'>\n                <h1>{item.name}</h1>\n                <ul>\n                    <li>\n                        <strong>Nombre del Actor:</strong> {item.portrayed}\n                    </li>\n                    <li>\n                        <strong>Cumplea√±os:</strong> {item.birthday}\n                    </li>\n                    <li>\n                        <strong>Nombre en la serie:</strong> {item.nickname}\n                    </li>\n                    <li>\n                        <strong>¬øVive en la serie?:</strong> {item.status}\n                    </li>\n                </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CharacterItem\n","import React from 'react'\nimport CharacterItem from './CharacterItem'\n\n\nconst CharacterGrid = ({items, isLoading }) => {\nreturn isLoading ? (<h2>Cargando...</h2>) : (<section className='cards'>\n    {items.map(item => (\n        <CharacterItem key={item.char_id} item={item}/>\n    ))}\n</section>)\n}\n\nexport default CharacterGrid\n","import React from 'react'\nimport breakingbad from '../assets/img/breakingbad.png'\n\nconst Navigation = () => {\n    return (\n        <header className='center'>\n            <img src={breakingbad} alt=''/>\n        </header>\n    )\n}\n\nexport default Navigation\n","import React, { useState } from 'react'\n\nconst Search = ({ getQuery }) => {\n    const [text, setText] = useState('')\n\n        const onChange = (q) => {\n            setText(q)\n            getQuery(q)\n        }\n    return (\n        <section className='search'>\n            <form>\n                <input \n                type='text' \n                className='form-control' \n                placeholder='Busca tu personaje aqui'\n                value={text}\n                onChange={(e) => onChange(e.target.value)}\n                autoFocus\n                />\n            </form>\n        </section>\n    )\n}\n\nexport default Search\n","import React from 'react'\n\nconst Footer = () => {\n    return (\n        <>\n            <div className='center'>\n                <p>React.js üë©üèª‚Äçüíª by https://github.com/LocalHostBit</p>\n            </div>\n        </>\n    )\n}\n\nexport default Footer\n","import React, { useState, useEffect} from 'react'\nimport styles from './components/styles.css'\nimport axios from 'axios'\nimport CharacterGrid from './components/characters/CharacterGrid'\nimport Navigation from './components/Navigation'\nimport Search from './components/Search'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [items, setItems] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [query, setQuery] = useState(true)\n\n  useEffect(() => {\n    const fetchItems = async () => {\n      const result = await axios (\n        `https://www.breakingbadapi.com/api/characters?name=${query}`\n        )\n\n      console.log(result.data)\n      setItems(result.data)\n      setIsLoading(false)\n    }\n\n    fetchItems()\n  }, [query])\n\n  return (\n    <>\n    <Navigation />\n    <Search getQuery={(q) => setQuery(q)}/>\n    <CharacterGrid isLoading={isLoading} items={items}/>\n    <Footer />\n    </>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}